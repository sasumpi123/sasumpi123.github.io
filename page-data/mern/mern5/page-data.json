{"componentChunkName":"component---src-templates-blog-post-js","path":"/mern/mern5/","result":{"data":{"site":{"siteMetadata":{"title":"MuriMuri's Dev Note","author":"MuriMuri","siteUrl":"https://sasumpi123.github.io","comment":{"disqusShortName":"","utterances":"sasumpi123/sasumpi123.github.io"},"sponsor":{"buyMeACoffeeId":"sasumpi123"}}},"markdownRemark":{"id":"b2ee8c5e-a145-5ad3-9dc4-296c0b6167ef","excerpt":"와 연결을 끝냈으면 아래와 같은 폴더구조를 만들자. 폴더 아래에 폴더를 생성하고 그안에 파일을 생성하면된다. MongoDB…","html":"<p><code class=\"language-text\">MongoDB</code>와 연결을 끝냈으면 아래와 같은 폴더구조를 만들자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MERN\n└── server\n    ├── db\n    │   └── index.js\n    ├── node_modules\n    │   └── ...\n    ├── models\n    │   └── addr-model.js\n    ├── index.js\n    ├── package-lock.json\n    └── package.json</code></pre></div>\n<p><code class=\"language-text\">server</code>폴더 아래에 <code class=\"language-text\">models</code>폴더를 생성하고<br>\n그안에 <code class=\"language-text\">addr-model.js</code>파일을 생성하면된다.<br>\nMongoDB를 통해 우리가 실질적으로 사용할 스키마를 여기서 정의할것이다.   </p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// MongoDB 스키마 정의</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span></span><span class=\"token keyword\">const</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema\n\n<span class=\"token keyword\">const</span> Addr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> String <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        phone<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> String <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addr'</span><span class=\"token punctuation\">,</span> Addr<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// DB에 있는 addr이라는 데이터 콜렉션을 현재 코드의 Addr이라는 json객체와 연결</span></code></pre></div>\n<p>우리는 현재 주소록 컨셉의 <code class=\"language-text\">CRUD</code>를 만들려고 하고있기때문에,<br>\n이름, 이메일, 핸드폰 번호 데이터가 필요하다.<br>\n이름은 데이터 타입이 <code class=\"language-text\">String</code> 이고 유니크하며 필수이다.<br>\n이메일의 타입은 <code class=\"language-text\">String</code>이고 핸드폰 번호도 <code class=\"language-text\">String</code>이다.</p>\n<p>이전 <code class=\"language-text\">db</code>폴더안의 <code class=\"language-text\">index.js</code>에서 아래코드를 작성했었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mongoose.connect(&#39;mongodb://127.0.0.1:27017/addr&#39;, { useNewUrlParser: true })</code></pre></div>\n<p>우리는 <code class=\"language-text\">MongoDB</code>에서 <code class=\"language-text\">addr Collection</code>과 연결이 되있는상태이다.<br>\n따라서 우리는 해당 <code class=\"language-text\">Collection</code>과 우리가 만든 <code class=\"language-text\">Schema</code>를 연결하기위해<br>\n아래의 코드가 필요하다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">module.exports = mongoose.model(&#39;addr&#39;, Addr)</code></pre></div>\n<p>이제 우리가 하려는 주된 목적인 CRUD코드를 작성할 차례이다.<br>\n먼저 MERN스택에서 CRUD를 하기위해선 MongoDB CRUD Query문을 알아야한다.   </p>\n<p>먼저 아래와 같은 폴더구조를 만들자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MERN\n└── server\n    ├── db\n    │   └── index.js\n    ├── node_modules\n    │   └── ...\n    ├── models\n    │   └── addr-model.js\n    ├── controllers\n    │   └── addr-ctrl.js\n    ├── index.js\n    ├── package-lock.json\n    └── package.json</code></pre></div>\n<p><code class=\"language-text\">server</code>폴더 아래에 <code class=\"language-text\">controllers</code>폴더를 생성하고<br>\n그안에 <code class=\"language-text\">addr-ctrl.js</code>파일을 생성하면된다.</p>\n<p>해당 <code class=\"language-text\">addr-ctrl.js</code> 에 우리가 정의한 <code class=\"language-text\">Schema</code> 모듈을 가져온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Addr = require(&#39;../models/addr-model&#39;)</code></pre></div>\n<p>먼저 c<code class=\"language-text\">Read</code>ud에 대한 함수를 작성해보자   </p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">addrList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> Addr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> addrs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>   <span class=\"token comment\">// 빈 객체면 모든걸 찾음</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>            <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> err <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>addrs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> res\n                <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> success<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'주소록을 찾을 수 없습니다.'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> success<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> addrs <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드에서 화살표함수와 비동기함수에서 매우 중요한 <code class=\"language-text\">async</code> <code class=\"language-text\">await</code><br>\n라는 단어를 볼수있다. 이 개념들에 대한 설명들은 따로 포스팅할 계획이다.   </p>\n<p><code class=\"language-text\">addrList</code>라는 변수를 선언하고 함수를 대입한다.<br>\n위 함수는 <code class=\"language-text\">req</code>, <code class=\"language-text\">res</code>를 파라미터로 받으며 <code class=\"language-text\">Addr.find()</code>를 통해<br>\n<code class=\"language-text\">Collection</code>에 있는 데이터들을 검색한다.<br>\n만약 <code class=\"language-text\">err</code>가 발생하면 <code class=\"language-text\">400</code>에러를 세팅하고<br>\n검색한 데이터의 길이가 0이라면 (비어있다면)<br>\n<code class=\"language-text\">404</code>에러를 세팅하고 <strong>주소록을 찾을 수 없습니다</strong> 라는 메세지를 담아준다.<br>\n만약 검색에 성공했다면, <code class=\"language-text\">data</code>에 검색 결과들을 담아준다.<br>\n<code class=\"language-text\">.catch</code>를 통해 에러발생시 에러메세지를 콘솔에 출력해준다.</p>","frontmatter":{"title":"MERN 스택(Model 생성)","date":"April 23, 2020","thumbnail":null}}},"pageContext":{"slug":"/mern/mern5/","previous":{"fields":{"slug":"/mern/mern4/"},"frontmatter":{"title":"MERN 스택(Express.js, MongDB 연결)","category":"mern","draft":false}},"next":null}}}